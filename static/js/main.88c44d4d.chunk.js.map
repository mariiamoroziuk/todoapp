{"version":3,"sources":["services/tasksAPI.js","components/common/loader.js","components/TasksPage/style.js","store/actions/modal.js","store/constans/modal.js","components/TaskForm/style.js","components/TaskForm/index.js","services/authAPI.js","components/LoginForm/style.js","components/LoginForm/index.js","components/TasksPage/index.js","store/actions/tasks.js","store/constans/tasks.js","store/reducers/tasks.js","store/reducers/modal.js","store/reducers/index.js","index.js","store/index.js","App.js"],"names":["Tasks","this","url","field","direction","page","axios","get","then","res","data","post","id","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","SimpleBackdrop","classes","Backdrop","className","open","CircularProgress","root","marginTop","width","backgroundColor","button","marginBottom","height","completed","noCompleted","cursor","pageNumber","margin","activePageNumber","fontSize","message","position","borderRadius","top","right","pages","loginButton","marginLeft","openTaskModal","payload","dispatch","type","openLoginModal","paper","spacing","display","flexDirection","alignItems","CreateTask","reloadTasks","showMessage","modal","useSelector","state","task","useDispatch","useState","setData","closeModal","modalActions","handleInputChange","event","target","value","name","Dialog","onClose","fullWidth","maxWidth","Typography","component","variant","onSubmit","preventDefault","localStorage","getItem","form","FormData","append","username","email","text","TasksAPI","addTask","status","updateTask","label","onChange","validators","errorMessages","FormControlLabel","control","Checkbox","Button","Box","mt","AuthAPI","removeItem","LoginForm","setLogin","login","password","postAuth","setItem","token","TaskPage","tasks","loaded","count","filter","setFilter","setDirection","setPageNumber","buttonText","setButtonText","setPages","setMessage","getTasks","tasksActions","useEffect","lenght","Math","ceil","push","getPages","window","addEventListener","changePage","BottomNavigation","newValue","BottomNavigationAction","icon","onClick","logOut","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","key","scope","setTimeout","initState","combineReducers","action","total_task_count","store","logger","createLogger","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","ReactDOM","render","Container","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.88c44d4d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport default class Tasks  {\r\n    constructor() {\r\n        this.url = 'https://uxcandy.com/~shapoval/test-task-backend/v2';\r\n    }\r\n\r\n    getTasks(field, direction, page) {\r\n\r\n        return axios.get(`${this.url}?developer=mariia&sort_direction=${direction}&sort_field=${field}&page=${page}`)\r\n            .then(res => res.data)\r\n    }\r\n\r\n    addTask(data) {\r\n        return axios.post(\r\n            `${this.url}/create?developer=mariia`,\r\n            data,\r\n        )\r\n            .then(res => res.data);\r\n    }\r\n\r\n    updateTask(data, id){\r\n        return axios.post(\r\n            `${this.url}/edit/${id}?developer=mariia`,\r\n            data,\r\n        )\r\n            .then(res => res.data);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function SimpleBackdrop() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Backdrop className={classes.backdrop} open={true}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n        </div>\r\n    );\r\n}","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n\r\n    root: {\r\n        marginTop: 20,\r\n        width: '100%',\r\n        backgroundColor: '#DCDCDC',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n        height: 50\r\n    },\r\n    completed: {\r\n        color: 'red'\r\n    },\r\n    noCompleted: {\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n            color: 'blue'\r\n        },\r\n    },\r\n    pageNumber: {\r\n        margin: 5,\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n            color: 'blue'\r\n        },\r\n    },\r\n    activePageNumber: {\r\n        color: 'blue',\r\n        fontSize: 20\r\n    },\r\n    message: {\r\n        color: 'lightgrey',\r\n        backgroundColor: 'blue',\r\n        position: 'absolute',\r\n        borderRadius: 4,\r\n        top: 550,\r\n        right: 300,\r\n        fontSize: 30\r\n    },\r\n    pages: {\r\n        margin: 20,\r\n    },\r\n    loginButton:{\r\n        marginLeft: 0,\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n            color: 'blue'\r\n        },\r\n    },\r\n}));\r\n","import * as MODAL from \"../constans/modal\";\r\n\r\nexport function openTaskModal(payload){\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: MODAL.OPEN_TASK_MODAL,\r\n            data: payload,\r\n        });\r\n    };\r\n}\r\n\r\nexport function openLoginModal(payload){\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: MODAL.OPEN_LOGIN_MODAL,\r\n            data: payload,\r\n        });\r\n    };\r\n}","export const OPEN_TASK_MODAL = 'open_task_modal';\r\nexport const OPEN_LOGIN_MODAL = 'open_login_modal';","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n\r\n    paper: {\r\n        marginTop: theme.spacing(7),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    button: {\r\n        marginTop: 50,\r\n        marginLeft: 40\r\n    },\r\n}));\r\n","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport {TextValidator, ValidatorForm} from 'react-material-ui-form-validator'\r\nimport {useStyles} from './style'\r\nimport { Dialog, Box, Typography, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport * as modalActions from '../../store/actions/modal';\r\nimport TasksAPI from \"../../services/tasksAPI\";\r\n\r\nexport default function CreateTask({reloadTasks, showMessage}){\r\n    const {modal} = useSelector(state =>\r\n        ({modal: state.modal.task})\r\n    );\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState({'username': '', 'email': '', 'text': '', 'status': ''});\r\n\r\n    const closeModal=()=>{\r\n        modalActions.openTaskModal(false)(dispatch);\r\n        setData({'username': '', 'email': '', 'text': '', 'status': ''})\r\n    };\r\n\r\n    const handleInputChange = event => {\r\n        const {value, name} = event.target;\r\n        setData({...data, ...{[name]: value}});\r\n    };\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault();\r\n        if(!localStorage.getItem('token')){\r\n            modalActions.openLoginModal(true)(dispatch);\r\n        }else{\r\n        if (modal==='create') {\r\n            const form = new FormData();\r\n            form.append(\"username\", data.username);\r\n            form.append(\"email\", data.email);\r\n            form.append(\"text\", data.text);\r\n            (new TasksAPI())\r\n                .addTask(form)\r\n                .then(() => reloadTasks());\r\n            showMessage('new task was created')\r\n        } else {\r\n            const form = new FormData();\r\n            form.append(\"token\", localStorage.getItem('token'));\r\n            form.append(\"status\", data.status||modal.status);\r\n            form.append(\"text\", data.text||modal.text);\r\n            (new TasksAPI())\r\n                .updateTask(form, modal.id)\r\n                .then(()=>reloadTasks());\r\n            showMessage('task was updated')\r\n        }}\r\n        closeModal();\r\n        setData({'username': '', 'email': '', 'text': '', 'status': ''})\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={modal}\r\n                onClose={closeModal}\r\n                fullWidth={true}\r\n                maxWidth='xs'>\r\n                <div className={classes.paper}>\r\n                    {modal==='create'?\r\n                    <Typography component=\"h1\" variant=\"h5\">CREATE NEW TASK</Typography>\r\n                        :   <Typography component=\"h1\" variant=\"h5\">UPDATE TASK</Typography>}\r\n                    <ValidatorForm onSubmit={onSubmit}>\r\n                        {modal==='create'?\r\n                            <>\r\n                        <TextValidator\r\n                            label=\"User name\"\r\n                            onChange={handleInputChange}\r\n                            name=\"username\"\r\n                            type=\"text\"\r\n                            value={data.username}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        <br/>\r\n                        <TextValidator\r\n                            label=\"Email\"\r\n                            onChange={handleInputChange}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            value={data.email}\r\n                            validators={['required', 'isEmail']}\r\n                            errorMessages={['this field is required', 'email is not valid']}\r\n                        />\r\n                        <br/>\r\n                        <TextValidator\r\n                            label=\"Task\"\r\n                            onChange={handleInputChange}\r\n                            name=\"text\"\r\n                            type=\"text\"\r\n                            value={data.text}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        <br/>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <Typography component=\"h5\" variant=\"h5\">username:{modal.username}</Typography>\r\n                                <Typography component=\"h5\" variant=\"h5\">email:{modal.email}</Typography>\r\n                                <TextValidator\r\n                                    label=\"Task\"\r\n                                    onChange={handleInputChange}\r\n                                    name=\"text\"\r\n                                    type=\"text\"\r\n                                    value={data.text}\r\n                                />\r\n                                <br/>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            onChange={handleInputChange}\r\n                                            name=\"status\"\r\n                                            value={10}\r\n                                            color='default'\r\n                                        />\r\n                                    }\r\n                                    label={'completed'}\r\n                                />\r\n                            </>}\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"outlined\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </ValidatorForm>\r\n                </div>\r\n                <Box mt={8}>\r\n                </Box>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nexport default class AuthAPI {\r\n    constructor() {\r\n        this.url = 'https://uxcandy.com/~shapoval/test-task-backend/v2';\r\n    }\r\n    postAuth(data) {\r\n        return axios.post(\r\n            `${this.url}/login?developer=mariia`,\r\n            data,\r\n        )\r\n            .then(res => res.data);\r\n    }\r\n\r\n    logOut() {\r\n        localStorage.removeItem('token');\r\n    }\r\n}","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n\r\n    paper: {\r\n        marginTop: theme.spacing(7),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    button: {\r\n        marginTop: 50,\r\n        marginLeft: 40\r\n    },\r\n}));\r\n","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport {TextValidator, ValidatorForm} from 'react-material-ui-form-validator'\r\nimport {useStyles} from './style'\r\nimport { Dialog, Box, Typography } from '@material-ui/core'\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport * as modalActions from '../../store/actions/modal';\r\nimport AuthAPI from '../../services/authAPI'\r\n\r\nexport default function LoginForm({setLogin}){\r\n    const {modal} = useSelector(state =>\r\n        ({modal: state.modal.login})\r\n    );\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState({'username': '', 'password': ''});\r\n\r\n    const closeModal=()=>{\r\n        modalActions.openLoginModal(false)(dispatch);\r\n        setData({'username': '', 'password': ''});\r\n    };\r\n\r\n    const handleInputChange = event => {\r\n        const {value, name} = event.target;\r\n        setData({...data, ...{[name]: value}});\r\n    };\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault();\r\n        closeModal();\r\n        const form = new FormData();\r\n        form.append(\"username\", data.username);\r\n        form.append(\"password\", data.password);\r\n        (new AuthAPI())\r\n            .postAuth(form)\r\n            .then((res)=>{localStorage.setItem('token', res.message.token); setLogin(res.message.token)} );\r\n        setData({'username': '', 'password': ''});\r\n     };\r\n\r\n    return (\r\n        <>\r\n        <Dialog\r\n            open={modal}\r\n            onClose={closeModal}\r\n            fullWidth={true}\r\n            maxWidth='xs'>\r\n                    <div className={classes.paper}>\r\n                        <Typography component=\"h1\" variant=\"h5\">Sign in</Typography>\r\n                            <ValidatorForm onSubmit={onSubmit}>\r\n                                <TextValidator\r\n                                    label=\"User name\"\r\n                                    onChange={handleInputChange}\r\n                                    name=\"username\"\r\n                                    type=\"text\"\r\n                                    value={data.username}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <br/>\r\n                                <TextValidator\r\n                                    label=\"Password\"\r\n                                    onChange={handleInputChange}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={data.password}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <br/>\r\n                                    <Button\r\n                                        className={classes.button}\r\n                                        variant=\"outlined\"\r\n                                        type=\"submit\"\r\n                                    >\r\n                                       Submit\r\n                                    </Button>\r\n                            </ValidatorForm>\r\n                    </div>\r\n                    <Box mt={8}>\r\n                    </Box>\r\n        </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport * as tasksActions from '../../store/actions/tasks';\r\nimport Loader from '../common/loader'\r\nimport {useStyles} from './style'\r\nimport * as modalActions from \"../../store/actions/modal\";\r\nimport TaskForm from '../TaskForm';\r\nimport AuthAPI from \"../../services/authAPI\";\r\nimport LoginForm from '../LoginForm';\r\n\r\nexport default function TaskPage() {\r\n    const {loaded, tasks, count} = useSelector(state =>\r\n        ({  tasks: state.tasks.tasks,\r\n            loaded: state.tasks.loaded,\r\n            count: state.tasks.count,})\r\n    );\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const [filter, setFilter] = useState('username');\r\n    const [direction, setDirection] = useState('asc');\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [buttonText, setButtonText] = useState(true);\r\n    const [pages, setPages] = useState([]);\r\n    const [login, setLogin] = useState(localStorage.getItem('token'));\r\n    const [message, setMessage] = useState('');\r\n\r\n    const reloadTasks=()=>{\r\n        tasksActions.getTasks(filter, direction, pageNumber)(dispatch)\r\n    }\r\n\r\n    const getPages=()=>{\r\n        let lenght=(Math.ceil(count/3));\r\n        let  pages = [];\r\n        for (let page=1; page<=lenght; page++){\r\n            pages.push(page)\r\n        }\r\n        setPages(pages);\r\n    }\r\n\r\n    useEffect(() => reloadTasks(), [filter, direction, pageNumber]);\r\n    useEffect(() => getPages(), [count]);\r\n\r\n    window.addEventListener('storage', function(event) {\r\n        setLogin(localStorage.getItem('token'))\r\n    });\r\n\r\n    const changeDirection=()=>{\r\n        direction==='asc'? setDirection('desc'):setDirection('asc');\r\n        setButtonText(!buttonText)\r\n    };\r\n    const changePage=(page)=>{\r\n        setPageNumber(page)\r\n    };\r\n    const handleChange = (event, newValue) => {\r\n        setFilter(newValue);\r\n    };\r\n    const openTaskModal=(type)=>{\r\n        modalActions.openTaskModal(type)(dispatch)\r\n    };\r\n    const openLoginModal=()=>{\r\n        modalActions.openLoginModal(true)(dispatch)\r\n    };\r\n    const logout=()=>{\r\n        (new AuthAPI()).logOut();\r\n        setLogin('');\r\n    };\r\n    const showMessage=(message)=>{\r\n        setTimeout(()=>setMessage(message), 700);\r\n        setTimeout(()=>setMessage(''), 5000)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {loaded?\r\n                (<>\r\n                <BottomNavigation value={filter} onChange={handleChange} className={classes.root}>\r\n                    <h3>sort by:</h3>\r\n                    <BottomNavigationAction label=\"id\" value=\"id\" icon={<RestoreIcon />} />\r\n                    <BottomNavigationAction label=\"username\" value=\"username\" icon={<FavoriteIcon />} />\r\n                    <BottomNavigationAction label=\"email\" value=\"email\" icon={<LocationOnIcon />} />\r\n                    <BottomNavigationAction label=\"status\" value=\"status\" icon={<FolderIcon />} />\r\n                    {login?\r\n                        <h3 className={classes.loginButton} onClick={logout}>LOGOUT</h3>\r\n                        :<h3 className={classes.loginButton} onClick={openLoginModal}>SIGN IN</h3>}\r\n                </BottomNavigation>\r\n                <Button\r\n                    className={classes.button}\r\n                    variant=\"outlined\"\r\n                    type=\"submit\"\r\n                    onClick={changeDirection}\r\n                >\r\n                    {buttonText? <ExpandLessIcon/>: <ExpandMoreIcon/>}\r\n                </Button>\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Task</TableCell>\r\n                                <TableCell align=\"right\">id</TableCell>\r\n                                <TableCell align=\"right\">username</TableCell>\r\n                                <TableCell align=\"right\">email</TableCell>\r\n                                <TableCell align=\"right\">completed</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {tasks.map(task => (\r\n                                <TableRow key={task.id}>\r\n                                    <TableCell component=\"th\" scope=\"row\">{task.text}</TableCell>\r\n                                    <TableCell align=\"right\">{task.id}</TableCell>\r\n                                    <TableCell align=\"right\">{task.username}</TableCell>\r\n                                    <TableCell align=\"right\">{task.email}</TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                    {task.status===0?\r\n                                        <>\r\n                                        {login? <div className={classes.noCompleted} onClick={()=>openTaskModal(task)}>update</div> :<div>not complete</div>}\r\n                                        </>:\r\n                                    (<div className={classes.completed}>completed</div>)\r\n                                    }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    <div className={classes.pages}>\r\n                    {pages.map((page)=>(\r\n                        <>\r\n                            {page === pageNumber ?\r\n                                <span className={classes.activePageNumber} onClick={() => {\r\n                                    changePage(page)\r\n                                }}>{page}</span>\r\n                                : <span className={classes.pageNumber} onClick={() => {\r\n                                    changePage(page)\r\n                                }}>{page}</span>\r\n                            }\r\n                        </>\r\n                    ))}\r\n                    </div>\r\n                </TableContainer>\r\n                <div className={classes.message} >{message}</div>\r\n                <Button\r\n                    className={classes.button}\r\n                    variant=\"outlined\"\r\n                    onClick={()=>openTaskModal('create')}\r\n                >\r\n                    create new task\r\n                </Button>\r\n                </>)\r\n                : <Loader/>}\r\n            <TaskForm reloadTasks={reloadTasks} showMessage={showMessage}/>\r\n            <LoginForm setLogin={setLogin}/>\r\n        </>\r\n    );\r\n}","import * as TASKS from \"../constans/tasks\";\r\nimport TasksAPI from \"../../services/tasksAPI\";\r\n\r\nexport function getTasks(field, direction, page){\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: TASKS.TASKS_REQUEST_SENT\r\n        });\r\n        (new TasksAPI()).getTasks(field, direction, page).then(res => {\r\n            return dispatch({\r\n                type: TASKS.TASKS_FETCH,\r\n                data: res\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\n","export const TASKS_REQUEST_SENT = 'tasks_request_sent';\r\nexport const TASKS_FETCH = 'tasks_fetch';\r\nexport const TASK_ADD = 'task_add';","import * as TASKS from '../constans/tasks';\r\n\r\nconst initState = {\r\n    loaded:false,\r\n    tasks: [],\r\n    count:0,\r\n};\r\n\r\nexport default function (state = initState, action) {\r\n\r\n    switch (action.type) {\r\n\r\n        case TASKS.TASKS_REQUEST_SENT:\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    loaded: false,\r\n                }\r\n            };\r\n\r\n        case TASKS.TASKS_FETCH:\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    loaded: true,\r\n                    tasks: action.data.message.tasks,\r\n                    count: action.data.message.total_task_count,\r\n                }\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import * as MODAL from \"../constans/modal\";\r\n\r\nconst initState = {\r\n    task:false,\r\n    login: false,\r\n};\r\n\r\nexport default function (state = initState, action) {\r\n\r\n    switch (action.type) {\r\n\r\n        case MODAL.OPEN_TASK_MODAL:\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    task: action.data,\r\n                }\r\n            };\r\n\r\n        case MODAL.OPEN_LOGIN_MODAL:\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    login: action.data,\r\n                }\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport tasks from './tasks'\r\nimport modal from './modal'\r\n\r\nexport default combineReducers({\r\n    tasks,\r\n    modal\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { configureStore } from './store/index'\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n)","import { applyMiddleware, createStore } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport rootReducer from './reducers'\r\n\r\nexport function configureStore(initState) {\r\n    const logger = createLogger();\r\n    return createStore(\r\n        rootReducer,\r\n        initState,\r\n        composeWithDevTools(applyMiddleware(logger, thunk))\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport TasksPage from './components/TasksPage';\n\nimport {Container, CssBaseline} from \"@material-ui/core\";\n\nexport default function App() {\n    return(\n        <Container component=\"main\" maxWidth=\"md\">\n            <CssBaseline/>\n            <TasksPage/>\n        </Container>\n    )\n}\n"],"sourceRoot":""}